// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model name {
  id              String            @id @default(uuid())
  cursorId        Int               @unique @default(autoincrement())
  name            String
  sex             sex
  // simliarNames    String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  popularity      popularity[]
  projectBabyName projectBabyName[]

  @@unique(fields: [name, sex], name: "nameId", map: "name.nameId")
}

model popularity {
  id         Int    @id @default(autoincrement())
  year       Int
  rank       Int
  popularity Int
  name       name   @relation(fields: [nameId], references: [id])
  nameId     String
}

// track the years inserted into DB so that there aren't any dupes
model namesYear {
  id   Int @id @default(autoincrement())
  year Int @unique
}

model userAddedName {
  id        Int      @id @default(autoincrement())
  name      String
  sex       sex?
  addedBy   user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  userId    String
}

model user {
  id                       String       @id @default(uuid())
  email                    String       @unique
  firstName                String?
  lastName                 String?
  role                     role         @default(USER)
  userProfile              userProfile?
  // capabilities             capabilities
  acceptTermsAndConditions Boolean      @default(false)
  active                   Boolean      @default(true)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt

  userAddedName   userAddedName[]
  authentication  authentication[]
  project         project[]
  rating          rating[]
  projectInvite   projectInvite[]
  projectBabyName projectBabyName[]
}

model authentication {
  id       String @id @default(uuid())
  password String
  user     user   @relation(fields: [userId], references: [id])
  userId   String
}

// model capabilities {
//   id Int @id @default(autoincrement())
// }

model userProfile {
  id      String    @id @default(uuid())
  bio     String?
  guestOf project[]
  user    user      @relation(fields: [userId], references: [id])
  userId  String    @unique
}

model project {
  id             String            @id @default(uuid())
  babyName       projectBabyName[]
  owner          user              @relation(fields: [ownerId], references: [id])
  ownerId        String
  projectName    String
  babyDOB        DateTime?
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  guests         userProfile[]
  projectInvites projectInvite[]

}

model projectBabyName {
  id        String   @id @default(uuid())
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name      name     @relation(fields: [nameId], references: [id])
  addedBy   user     @relation(fields: [userId], references: [id]) //work on adding who the name was added by
  nameId    String
  ratings   rating[]
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model rating {
  id         String          @id @default(uuid())
  rating     Int
  user       user            @relation(fields: [userId], references: [id])
  userId     String
  babyName   projectBabyName @relation(fields: [babyNameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  babyNameId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model projectInvite {
  id           Int       @id @default(autoincrement())
  inviteCode   String    @default(cuid())
  email        String
  project      project   @relation(fields: [projectId], references: [id])
  accepted     Boolean   @default(false)
  acceptedDate DateTime?
  revoked      Boolean   @default(false)
  projectId    String
  user         user?     @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// model refreshTokens {
//   id         Int     @id @default(autoincrement())
//   userId     String?
//   jti        String?
//   exp        Int?
//   validToken Boolean @default(true)
// }

enum sex {
  M
  F
}

enum role {
  ADMIN
  CREATOR
  USER
}
