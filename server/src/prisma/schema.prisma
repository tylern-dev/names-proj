// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// add a way of tracking years to not duplicate

model name {
  id              String            @id @default(uuid())
  cursorId        Int               @unique @default(autoincrement())
  name            String
  sex             sex
  popularity      popularity[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  projectBabyName projectBabyName[]


  @@unique(fields: [name, sex], name: "nameId")
}

model popularity {
  id         Int    @id @default(autoincrement())
  year       Int
  rank       Int
  popularity Int
  name       name   @relation(fields: [nameId], references: [id])
  nameId     String
}

// track the years inserted into DB so that there aren't any dupes
model namesYear {
  id   Int @id @default(autoincrement())
  year Int @unique
}

model user {
  id                       String       @id @default(uuid())
  email                    String       @unique
  firstName                String?
  lastName                 String?
  role                     role         @default(USER)
  userProfile              userProfile?
  acceptTermsAndConditions Boolean      @default(false)
  active                   Boolean      @default(true)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt

  authentication authentication[]
  project        project[]
  projectInvites projectInvite[]
  rating         rating[]
}

model authentication {
  id       String @id @default(uuid())
  password String
  user     user   @relation(fields: [userId], references: [id])
  userId   String
}

model userProfile {
  id      String    @id @default(uuid())
  bio     String?
  babyDOB DateTime?
  guestOf project[]
  user    user      @relation(fields: [userId], references: [id])
  userId  String
}

model project {
  id             String            @id @default(uuid())
  babyName       projectBabyName[]
  owner          user              @relation(fields: [ownerId], references: [id])
  ownerId        String
  projectName    String
  guests         userProfile[]
  projectInvites projectInvite[]
}

model projectBabyName {
  id        String   @id @default(uuid())
  project   project  @relation(fields: [projectId], references: [id])
  name      name     @relation(fields: [nameId], references: [id])
  nameId    String
  ratings   rating[]
  projectId String
}

model rating {
  id         String           @id @default(uuid())
  rating     Int
  user       user             @relation(fields: [userId], references: [id])
  userId     String
  babyName   projectBabyName? @relation(fields: [babyNameId], references: [id])
  babyNameId String?
}

model projectInvite {
  id           String   @id @default(uuid())
  project      project  @relation(fields: [projectId], references: [id])
  invitee      user     @relation(fields: [userId], references: [id])
  accepted     Boolean  @default(false)
  acceptedDate DateTime
  revoked      Boolean  @default(false)
  projectId    String
  userId       String
}

enum sex {
  M
  F
}

enum role {
  ADMIN
  CREATOR
  USER
}
